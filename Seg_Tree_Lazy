class segTree
{
    vector<ll>seg,lazy;
    public:
        segTree(int n)
        {
            seg.resize(4*n+1);
            lazy.resize(4*n+1);
        }

        void build(int idx,int low,int high,vector<int>&v)
        {
            if(low==high)
            {
                seg[idx]=v[low];
                return;
            }

            int mid=low+(high-low)/2;
            build(2*idx+1,low,mid,v);
            build(2*idx+2,mid+1,high,v);
            seg[idx]=seg[2*idx+1]+seg[2*idx+2];
        }

        void update(int idx,int low,int high,int l,int r,int val)
        {
            if(lazy[idx]!=0)
            {
                seg[idx]+=(high-low+1)*lazy[idx];
                if(low!=high)
                {
                    lazy[2*idx+1]+=lazy[idx];
                    lazy[2*idx+2]+=lazy[idx];
                }
                lazy[idx]=0;
            }

            if(low>r||high<l)
            {
                return;
            }

            if(low>=l&&high<=r)
            {
                seg[idx]+=(high-low+1)*val;
                if(low!=high)
                {
                    lazy[2*idx+1]+=val;
                    lazy[2*idx+2]+=val;
                }
                return;
            }

            int mid=low+(high-low)/2;
            update(2*idx+1,low,mid,l,r,val);
            update(2*idx+2,mid+1,high,l,r,val);
            seg[idx]=seg[2*idx+1]+seg[2*idx+2];
        }

        ll query(int idx,int low,int high,int l,int r)
        {
            if(lazy[idx]!=0)
            {
                seg[idx]+=(high-low+1)*lazy[idx];
                if(low!=high)
                {
                    lazy[2*idx+1]+=lazy[idx];
                    lazy[2*idx+2]+=lazy[idx];
                }
                lazy[idx]=0;
            }

            if(low>r||high<l)
            {
                return 0;
            }

            if(low>=l&&high<=r)
            {
                return seg[idx];
            }

            int mid=low+(high-low)/2;
            int left=query(2*idx+1,low,mid,l,r);
            int right=query(2*idx+2,mid+1,high,l,r);
            return left+right;
        }

};
